/* Generated by Yosys 0.7+281 (git sha1 d38a64b, gcc 4.9.2-10 -fPIC -Os) */

(* src = "DRAM/DRAM1.v:1" *)
module DRAM1(data_a, addr_a, addr_b, we_a, re_b, clk, q_b);
  (* src = "DRAM/DRAM1.v:15" *)
  wire [2:0] _000_;
  (* src = "DRAM/DRAM1.v:15" *)
  wire [3:0] _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire [3:0] _017_;
  wire [3:0] _018_;
  wire [3:0] _019_;
  wire [3:0] _020_;
  wire [3:0] _021_;
  wire [3:0] _022_;
  wire [3:0] _023_;
  wire [3:0] _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire [3:0] _033_;
  wire [3:0] _034_;
  wire [3:0] _035_;
  wire [3:0] _036_;
  wire [3:0] _037_;
  wire [3:0] _038_;
  wire [3:0] _039_;
  wire [3:0] _040_;
  (* src = "DRAM/DRAM1.v:4" *)
  input [2:0] addr_a;
  (* src = "DRAM/DRAM1.v:4" *)
  input [2:0] addr_b;
  (* src = "DRAM/DRAM1.v:5" *)
  input clk;
  (* src = "DRAM/DRAM1.v:3" *)
  input [2:0] data_a;
  (* src = "DRAM/DRAM1.v:6" *)
  output [3:0] q_b;
  reg [3:0] q_b;
  reg [3:0] \ram[0] ;
  reg [3:0] \ram[1] ;
  reg [3:0] \ram[2] ;
  reg [3:0] \ram[3] ;
  reg [3:0] \ram[4] ;
  reg [3:0] \ram[5] ;
  reg [3:0] \ram[6] ;
  reg [3:0] \ram[7] ;
  (* src = "DRAM/DRAM1.v:5" *)
  input re_b;
  (* src = "DRAM/DRAM1.v:5" *)
  input we_a;
  assign _021_[0] = addr_b[0] ? \ram[3] [0] : \ram[2] [0];
  assign _021_[1] = addr_b[0] ? \ram[3] [1] : \ram[2] [1];
  assign _021_[2] = addr_b[0] ? \ram[3] [2] : \ram[2] [2];
  assign _021_[3] = addr_b[0] ? \ram[3] [3] : \ram[2] [3];
  assign _036_[0] = _028_ ? _001_[0] : \ram[3] [0];
  assign _036_[1] = _028_ ? _001_[1] : \ram[3] [1];
  assign _036_[2] = _028_ ? _001_[2] : \ram[3] [2];
  assign _036_[3] = _028_ ? _001_[3] : \ram[3] [3];
  assign _019_[0] = addr_b[1] ? _023_[0] : _022_[0];
  assign _019_[1] = addr_b[1] ? _023_[1] : _022_[1];
  assign _019_[2] = addr_b[1] ? _023_[2] : _022_[2];
  assign _019_[3] = addr_b[1] ? _023_[3] : _022_[3];
  assign _020_[0] = addr_b[0] ? \ram[1] [0] : \ram[0] [0];
  assign _020_[1] = addr_b[0] ? \ram[1] [1] : \ram[0] [1];
  assign _020_[2] = addr_b[0] ? \ram[1] [2] : \ram[0] [2];
  assign _020_[3] = addr_b[0] ? \ram[1] [3] : \ram[0] [3];
  assign _023_[0] = addr_b[0] ? \ram[7] [0] : \ram[6] [0];
  assign _023_[1] = addr_b[0] ? \ram[7] [1] : \ram[6] [1];
  assign _023_[2] = addr_b[0] ? \ram[7] [2] : \ram[6] [2];
  assign _023_[3] = addr_b[0] ? \ram[7] [3] : \ram[6] [3];
  assign _034_[0] = _026_ ? _001_[0] : \ram[1] [0];
  assign _034_[1] = _026_ ? _001_[1] : \ram[1] [1];
  assign _034_[2] = _026_ ? _001_[2] : \ram[1] [2];
  assign _034_[3] = _026_ ? _001_[3] : \ram[1] [3];
  assign _017_[0] = re_b ? _024_[0] : q_b[0];
  assign _017_[1] = re_b ? _024_[1] : q_b[1];
  assign _017_[2] = re_b ? _024_[2] : q_b[2];
  assign _017_[3] = re_b ? _024_[3] : q_b[3];
  assign _040_[0] = _032_ ? _001_[0] : \ram[7] [0];
  assign _040_[1] = _032_ ? _001_[1] : \ram[7] [1];
  assign _040_[2] = _032_ ? _001_[2] : \ram[7] [2];
  assign _040_[3] = _032_ ? _001_[3] : \ram[7] [3];
  assign _024_[0] = addr_b[2] ? _019_[0] : _018_[0];
  assign _024_[1] = addr_b[2] ? _019_[1] : _018_[1];
  assign _024_[2] = addr_b[2] ? _019_[2] : _018_[2];
  assign _024_[3] = addr_b[2] ? _019_[3] : _018_[3];
  assign _039_[0] = _031_ ? _001_[0] : \ram[6] [0];
  assign _039_[1] = _031_ ? _001_[1] : \ram[6] [1];
  assign _039_[2] = _031_ ? _001_[2] : \ram[6] [2];
  assign _039_[3] = _031_ ? _001_[3] : \ram[6] [3];
  assign _033_[0] = _025_ ? _001_[0] : \ram[0] [0];
  assign _033_[1] = _025_ ? _001_[1] : \ram[0] [1];
  assign _033_[2] = _025_ ? _001_[2] : \ram[0] [2];
  assign _033_[3] = _025_ ? _001_[3] : \ram[0] [3];
  assign _018_[0] = addr_b[1] ? _021_[0] : _020_[0];
  assign _018_[1] = addr_b[1] ? _021_[1] : _020_[1];
  assign _018_[2] = addr_b[1] ? _021_[2] : _020_[2];
  assign _018_[3] = addr_b[1] ? _021_[3] : _020_[3];
  assign _038_[0] = _030_ ? _001_[0] : \ram[5] [0];
  assign _038_[1] = _030_ ? _001_[1] : \ram[5] [1];
  assign _038_[2] = _030_ ? _001_[2] : \ram[5] [2];
  assign _038_[3] = _030_ ? _001_[3] : \ram[5] [3];
  assign _037_[0] = _029_ ? _001_[0] : \ram[4] [0];
  assign _037_[1] = _029_ ? _001_[1] : \ram[4] [1];
  assign _037_[2] = _029_ ? _001_[2] : \ram[4] [2];
  assign _037_[3] = _029_ ? _001_[3] : \ram[4] [3];
  assign _001_[0] = we_a ? (* src = "DRAM/DRAM1.v:17" *) data_a[0] : 1'hx;
  assign _001_[1] = we_a ? (* src = "DRAM/DRAM1.v:17" *) data_a[1] : 1'hx;
  assign _001_[2] = we_a ? (* src = "DRAM/DRAM1.v:17" *) data_a[2] : 1'hx;
  assign _001_[3] = we_a ? (* src = "DRAM/DRAM1.v:17" *) 1'h0 : 1'hx;
  assign _035_[0] = _027_ ? _001_[0] : \ram[2] [0];
  assign _035_[1] = _027_ ? _001_[1] : \ram[2] [1];
  assign _035_[2] = _027_ ? _001_[2] : \ram[2] [2];
  assign _035_[3] = _027_ ? _001_[3] : \ram[2] [3];
  assign _000_[0] = we_a ? (* src = "DRAM/DRAM1.v:17" *) addr_a[0] : 1'hx;
  assign _000_[1] = we_a ? (* src = "DRAM/DRAM1.v:17" *) addr_a[1] : 1'hx;
  assign _000_[2] = we_a ? (* src = "DRAM/DRAM1.v:17" *) addr_a[2] : 1'hx;
  assign _022_[0] = addr_b[0] ? \ram[5] [0] : \ram[4] [0];
  assign _022_[1] = addr_b[0] ? \ram[5] [1] : \ram[4] [1];
  assign _022_[2] = addr_b[0] ? \ram[5] [2] : \ram[4] [2];
  assign _022_[3] = addr_b[0] ? \ram[5] [3] : \ram[4] [3];
  assign _016_ = ~_000_[2];
  assign _015_ = ~_000_[1];
  assign _014_ = ~_000_[0];
  always @(posedge clk)
      \ram[1] [0] <= _034_[0];
  always @(posedge clk)
      \ram[1] [1] <= _034_[1];
  always @(posedge clk)
      \ram[1] [2] <= _034_[2];
  always @(posedge clk)
      \ram[1] [3] <= _034_[3];
  always @(posedge clk)
      \ram[3] [0] <= _036_[0];
  always @(posedge clk)
      \ram[3] [1] <= _036_[1];
  always @(posedge clk)
      \ram[3] [2] <= _036_[2];
  always @(posedge clk)
      \ram[3] [3] <= _036_[3];
  always @(posedge clk)
      \ram[4] [0] <= _037_[0];
  always @(posedge clk)
      \ram[4] [1] <= _037_[1];
  always @(posedge clk)
      \ram[4] [2] <= _037_[2];
  always @(posedge clk)
      \ram[4] [3] <= _037_[3];
  always @(posedge clk)
      \ram[6] [0] <= _039_[0];
  always @(posedge clk)
      \ram[6] [1] <= _039_[1];
  always @(posedge clk)
      \ram[6] [2] <= _039_[2];
  always @(posedge clk)
      \ram[6] [3] <= _039_[3];
  always @(posedge clk)
      \ram[5] [0] <= _038_[0];
  always @(posedge clk)
      \ram[5] [1] <= _038_[1];
  always @(posedge clk)
      \ram[5] [2] <= _038_[2];
  always @(posedge clk)
      \ram[5] [3] <= _038_[3];
  always @(posedge clk)
      \ram[7] [0] <= _040_[0];
  always @(posedge clk)
      \ram[7] [1] <= _040_[1];
  always @(posedge clk)
      \ram[7] [2] <= _040_[2];
  always @(posedge clk)
      \ram[7] [3] <= _040_[3];
  always @(posedge clk)
      q_b[0] <= _017_[0];
  always @(posedge clk)
      q_b[1] <= _017_[1];
  always @(posedge clk)
      q_b[2] <= _017_[2];
  always @(posedge clk)
      q_b[3] <= _017_[3];
  always @(posedge clk)
      \ram[2] [0] <= _035_[0];
  always @(posedge clk)
      \ram[2] [1] <= _035_[1];
  always @(posedge clk)
      \ram[2] [2] <= _035_[2];
  always @(posedge clk)
      \ram[2] [3] <= _035_[3];
  always @(posedge clk)
      \ram[0] [0] <= _033_[0];
  always @(posedge clk)
      \ram[0] [1] <= _033_[1];
  always @(posedge clk)
      \ram[0] [2] <= _033_[2];
  always @(posedge clk)
      \ram[0] [3] <= _033_[3];
  assign _027_ = _006_ & we_a;
  assign _002_ = _015_ & _016_;
  assign _028_ = _007_ & we_a;
  assign _008_ = _015_ & _000_[2];
  assign _006_ = _014_ & _005_;
  assign _005_ = _000_[1] & _016_;
  assign _026_ = _004_ & we_a;
  assign _032_ = _013_ & we_a;
  assign _013_ = _000_[0] & _011_;
  assign _031_ = _012_ & we_a;
  assign _012_ = _014_ & _011_;
  assign _011_ = _000_[1] & _000_[2];
  assign _004_ = _000_[0] & _002_;
  assign _025_ = _003_ & we_a;
  assign _009_ = _014_ & _008_;
  assign _003_ = _014_ & _002_;
  assign _010_ = _000_[0] & _008_;
  assign _029_ = _009_ & we_a;
  assign _030_ = _010_ & we_a;
  assign _007_ = _000_[0] & _005_;
endmodule

(* top =  1  *)
(* src = "FIFO.v:4" *)
module FIFO(data_a, clk, push, pop, reset, q_b, error, full, empty, almost_full, almost_empty);
  (* src = "FIFO.v:9" *)
  output almost_empty;
  (* src = "FIFO.v:9" *)
  output almost_full;
  (* src = "FIFO.v:7" *)
  input clk;
  (* src = "FIFO.v:6" *)
  input [3:0] data_a;
  (* src = "FIFO.v:9" *)
  output empty;
  (* src = "FIFO.v:9" *)
  output error;
  (* src = "FIFO.v:9" *)
  output full;
  (* src = "FIFO.v:7" *)
  input pop;
  (* src = "FIFO.v:7" *)
  input push;
  (* src = "FIFO.v:8" *)
  output [3:0] q_b;
  (* src = "FIFO.v:7" *)
  input reset;
  (* src = "FIFO.v:17" *)
  DRAM1 ram (
    .addr_a(3'h0),
    .addr_b(3'h0),
    .clk(clk),
    .data_a(data_a[2:0]),
    .q_b(q_b),
    .re_b(pop),
    .we_a(push)
  );
  assign almost_empty = 1'h0;
  assign almost_full = 1'h0;
  assign empty = 1'h1;
  assign error = 1'h0;
  assign full = 1'h0;
endmodule
